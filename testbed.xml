<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->

<sect1 id="testbed"><title> &slony1; Test Bed Framework </title>

<indexterm><primary>test bed framework</primary></indexterm>

<para> As of version 1.1.5, &slony1; has a common test bed framework
intended to better support running a comprehensive set of tests at
least somewhat automatically.  Older tests
used <application>pgbench</application> (not
a <emphasis>bad</emphasis> thing) but were troublesome to automate
because they were set up to spawn each &lslon; in
an <application>xterm</application> for the user
to <emphasis>watch</emphasis>.</para>

<para> The new test framework is mostly written in Bourne shell, and
is intended to be portable to both Bash (widely used on Linux) and
Korn shell (widely found on commercial UNIX systems).  The code lives
in the source tree under the <filename> tests
</filename> directory.</para>

<para> At present, nearly all of the tests make use of only two
databases that, by default, are on a single &postgres; postmaster on
one host.  This is perfectly fine for those tests that involve
verifying that &slony1; functions properly on various sorts of data.
Those tests do things like varying date styles, and creating tables
and sequences that involve unusual names to verify that quoting is
being handled properly. </para>

<para> It is also possible to configure environment variables so that
the replicated nodes will be placed on different database backends,
optionally on remote hosts, running varying versions of
&postgres;.</para>

<para>Here are some of the vital files...</para>

<itemizedlist>

<listitem><para> <filename>run_test.sh</filename> </para></listitem>

</itemizedlist>

<para> This is the central script for running tests.  Typical usage is
thus:</para>

<para> <command> ./run_test.sh </command></para>
<screen>
usage ./run_test.sh testname
</screen>

<para> You need to specify the subdirectory name of the test set to be
run; each such set is stored in a subdirectory of
<filename>tests</filename>.</para>

<para> You may need to set one or more of the following environment
variables to reflect your local configuration.  For instance, the
writer runs <quote>test1</quote> against &postgres; 8.0.x using the
following command line:</para>

<screen> PGBINDIR=/opt/OXRS/dbs/pgsql8/bin PGPORT=5532 PGUSER=cbbrowne ./run_test.sh test1 </screen>

<glosslist>
<glossentry><glossterm> <envar>PGBINDIR</envar> </glossterm>

<glossdef><para> This determines where the test scripts look for
&postgres; and &slony1; binaries.  The default is <filename>
/usr/local/pgsql/bin</filename>.</para>

<para> There are also variables <envar>PGBINDIR1</envar> thru
<envar>PGBINDIR13</envar> which allows you to specify a separate path
for each database instance.  That will be particularly useful when
testing interoperability of &slony1; across different versions of
&postgres; on different platforms. In order to create a database of
each respective version, you need to point to
an <application>initdb</application> of the appropriate
version.</para> </glossdef> </glossentry>

<glossentry><glossterm> <envar>PGPORT</envar> </glossterm>
<glossdef><para> This indicates what port the backend is on.  By
default, 5432 is used. </para> 

<para> There are also variables <envar>PORT1</envar> thru
<envar>PORT13</envar> which allow you to specify a separate port
number for each database instance.  That will be particularly useful
when testing interoperability of &slony1; across different versions of
&postgres;. </para> </glossdef> </glossentry>

<glossentry><glossterm> <envar>PGUSER</envar> </glossterm>
<glossdef><para> By default, the user <filename>postgres</filename> is
used; this is taken as the default user ID to use for all of the
databases. </para>

<para> There are also variables <envar>USER1</envar> thru
<envar>USER13</envar> which allow specifying a separate user name for
each database instance.  As always, with &slony1;, this needs
to be a &postgres; <quote>superuser.</quote> </para>  </glossdef> </glossentry>

<glossentry><glossterm> <envar>WEAKUSER</envar> </glossterm>
<glossdef><para> By default, the user <filename>postgres</filename> is
used; this is taken as the default user ID to use for the <xref linkend="stmtstorepath"/> connections to all of the
databases. </para>

<para> There are also variables <envar>WEAKUSER1</envar> thru
<envar>WEAKUSER13</envar> which allow specifying a separate user name
for each database instance.  This user <emphasis> does not </emphasis>
need to be a &postgres; <quote>superuser.</quote> This user can start
out with no permissions; it winds up granted read permissions on the
tables that the test uses, plus read access throughout the &slony1;
schema, plus write access to one table and sequence used to manage
node locks. </para> </glossdef> </glossentry>

<glossentry><glossterm> <envar>HOST</envar> </glossterm>
<glossdef><para> By default, <filename>localhost</filename> is used.
</para>

<para> There are also variables <envar>HOST1</envar> thru
<envar>HOST13</envar> which allow specifying a separate host for
each database instance.</para></glossdef>
</glossentry>

<glossentry><glossterm> <envar>DB1</envar> thru <envar>DB13 </envar> </glossterm> 

<glossdef><para> By default, <filename>slonyregress1</filename> thru
<filename>slonyregress13</filename> are used.
</para>

<para> You may override these from the environment if you have some
reason to use different names. </para></glossdef>
</glossentry>

<glossentry>
<glossterm><envar>ENCODING</envar></glossterm>

<glossdef><para> By default, <filename>UNICODE</filename> is used, so
that tests can create UTF8 tables and test the multibyte capabilities.
</para></glossdef>

</glossentry>

<glossentry>
<glossterm><envar>MY_MKTEMP_IS_DECREPIT</envar></glossterm>

<glossdef><para> If your version of Linux uses a variation of
<application>mktemp</application> that does not generate a full path
to the location of the desired temporary file/directory, then set this
value.  </para></glossdef>

</glossentry>

<glossentry>
<glossterm><envar>SLTOOLDIR</envar></glossterm>

<glossdef><para> Where to look for &slony1; tools such as
<application>slony1_dump.sh</application>.  </para></glossdef>

</glossentry>

<glossentry>
<glossterm><envar>ARCHIVE[n]</envar></glossterm>

<glossdef><para> If set to <quote>true</quote>, for a particular node,
which will normally get configured out of human sight in the
generic-to-a-particular-test file <filename>settings.ik</filename>,
then this node will be used as a data source for <xref
linkend="logshipping"/>, and this causes the test tools to set up a
directory for the <link linkend="slon-config-archive-dir">
archive_dir</link> option.  </para></glossdef>

</glossentry>

<glossentry>
<glossterm><envar>LOGSHIP[n]</envar></glossterm>

<glossdef><para> If set to <quote>true</quote>, for a particular node,
which will normally get configured out of human sight in
<filename>settings.ik</filename> for a particular test, then this
indicates that this node is being created via <xref
linkend="logshipping"/>, and a &lslon; is not required for this node.
</para></glossdef>

</glossentry>


</glosslist>

<para> Within each test, you will find the following files: </para>

<itemizedlist>
<listitem><para> <filename>README</filename> </para> 

<para> This file contains a description of the test, and is displayed
to the reader when the test is invoked. </para> </listitem>

<listitem><para> <filename>generate_dml.sh</filename> </para> 
<para> This contains script code that generates SQL to perform updates. </para> </listitem>
<listitem><para> <filename>init_add_tables.ik</filename> </para> 
<para>  This is a <xref linkend="slonik"/> script for adding the tables for the test to repliation. </para> </listitem>
<listitem><para> <filename>init_cluster.ik</filename> </para> 
<para> <xref linkend="slonik"/> to initialize the cluster for the test.</para> </listitem>
<listitem><para> <filename>init_create_set.ik</filename> </para> 
<para> <xref linkend="slonik"/> to initialize additional nodes to be used in the test. </para> </listitem>
<listitem><para> <filename>init_schema.sql</filename> </para> 
<para> An SQL script to create the tables and sequences required at the start of the test.</para> </listitem>
<listitem><para> <filename>init_data.sql</filename> </para> 
<para> An SQL script to initialize the schema with whatever state is required for the <quote>master</quote> node.  </para> </listitem>
<listitem><para> <filename>init_subscribe_set.ik</filename> </para> 
<para> A <xref linkend="slonik"/> script to set up subscriptions.</para> </listitem>
<listitem><para> <filename>settings.ik</filename> </para> 
<para> A shell script that is used to control the size of the cluster, how many nodes are to be created, and where the origin is.</para> </listitem>
<listitem><para> <filename>schema.diff</filename> </para> 
<para> A series of SQL queries, one per line, that are to be used to validate that the data matches across all the nodes.  Note that in order to avoid spurious failures, the queries must use unambiguous <command>ORDER BY</command> clauses.</para> </listitem>
</itemizedlist>

<para> If there are additional test steps, such as
running <xref linkend="stmtddlscript"/>,
additional <xref linkend="slonik"/> and SQL scripts may be necessary.</para>

</sect1>
