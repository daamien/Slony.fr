<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->
<sect1 id="triggers"><title>Gestion des triggers &slony1;</title>

<indexterm><primary>gestion des triggers</primary></indexterm>

<para> &slony1; a connu deux <quote>types</quote> des gestion de triggers

<itemizedlist>

<listitem><para> Jusqu'à la version 1.2, &postgres; n'avait pas conscience 
    de la réplication, ce qui impliquait que &slony1; avait besoin que l'on 
    <quote>modifie directement</quote> le catalogue système afin de
    désactiver, sur les noeuds abonnés, les triggers qui ne devaient pas être 
    exécutés.</para>

<para> Ceci provoquait un nombre d'effets secondaires pénibles, tels que :</para> 
<itemizedlist>

<listitem><para> La corruption du catalogue système sur les noeuds abonnés, car 
    les triggers existants, qui sont généralement cachés, sont <quote>modifiés
    directement </quote>, en modifiant <envar>pg_catalog.pg_trigger</envar>, pour qu'elle
    désigne les index utilisés par &slony1;, comme <quote>clé primaire</quote>.</para>

<para> Ceci est également vrai pour les règles ("rules"). </para>

<para> L'effet secondaire était que 
<application>pg_dump</application> ne pouvait pas être utilisé pour
récupérer proprement les schémas des noeuds abonnés.</para></listitem>

<listitem><para>Cela introduit la nécessité de poser des verrous exclusifs 
    sur <emphasis>toutes les tables répliquées</emphasis> lors de la commande
    &rddlchanges; puisque les triggers de chaque table répliquée devaient être
    supprimés et ajoutés à nouveau par cette opération.</para></listitem>

</itemizedlist>

<listitem><para> Avec &postgres; version 8.3, il y a de nouvelles fonctionnalités
    qui permettent de modifier le comportement des triggers et des règles via
    la commande <command>ALTER TABLE</command>, et de spécifier une des 
    options de triggers suivantes :</para>

<itemizedlist>

<listitem><para> <command> DISABLE TRIGGER nom_du_declencheur</command>  </para></listitem>
<listitem><para> <command> ENABLE TRIGGER nom_du_declencheur</command>  </para></listitem>
<listitem><para> <command> ENABLE REPLICA TRIGGER nom_du_declencheur</command>  </para></listitem>
<listitem><para> <command> ENABLE ALWAYS TRIGGER nom_du_declencheur</command>  </para></listitem>
<listitem><para> <command> DISABLE RULE nom_de_la_regle</command>  </para></listitem>
<listitem><para> <command> ENABLE RULE nom_de_la_regle</command>  </para></listitem>
<listitem><para> <command> ENABLE REPLICA RULE nom_de_la_regle</command>  </para></listitem>
<listitem><para> <command> ENABLE ALWAYS RULE nom_de_la_regle</command>  </para></listitem>

</itemizedlist>

<para>Une nouvelle variable GUC, <envar>session_replication_role</envar>
contrôle si la session est en mode 'origin', 'replica' ou 'local', ce qui 
combiné avec les options d'activation/désactivation permet de contrôler
si un trigger est effectivement exécuté. </para>

<para> On peut déterminer quand les triggers se déclenche dans une réplication &slony1;
  en utilisant la table suivante; le même principe s'applique aux règles.


<table id="triggerbehaviour"> <title>Comportement du trigger</title>
<tgroup cols="7">
<thead>
 <row> <entry>Type de trigger</entry> 
   <entry>Condition de déclenchement</entry>  
   <entry>trigger de log</entry> 
   <entry>trigger denyaccess</entry>  
   <entry>Action - origin</entry> 
   <entry>Action - replica</entry>  
   <entry>Action - local</entry> </row>
</thead>
<tbody>
<row> 
  <entry>DISABLE TRIGGER</entry> 
  <entry>Requête utilisateur</entry> 
  <entry>désactivé sur les noeuds abonnés</entry> 
  <entry>activé sur les noeuds abonnés</entry> 
  <entry>ne se déclenche pas</entry>  
  <entry>ne se déclenche pas</entry>  
  <entry>ne se déclenche pas</entry> 
</row>
<row> 
  <entry>ENABLE TRIGGER</entry> 
  <entry>par défaut</entry> 
  <entry>activé sur les noeuds abonnés</entry>
  <entry>désactivé sur les noeuds abonnés</entry>
  <entry>se déclenche</entry>
  <entry>ne se déclenche pas</entry>  
  <entry>se déclenche</entry>
</row>
<row> 
  <entry>ENABLE REPLICA TRIGGER</entry> 
  <entry>Requête utilisateur</entry> 
  <entry>inapproprié</entry> 
  <entry>inapproprié</entry> 
  <entry>ne se déclenche pas</entry>  
  <entry>se déclenche</entry>  
  <entry>ne se déclenche pas</entry> 
</row>
<row> 
  <entry>ENABLE ALWAYS TRIGGER</entry> 
  <entry>Requête utilisateur</entry> 
  <entry>inapproprié</entry> 
  <entry>inapproprié</entry> 
  <entry>se déclenche</entry>  
  <entry>se déclenche</entry>  
  <entry>se déclenche</entry> 
</row>
</tbody>

<para> Il y a désormais plusieurs façons pour &slony1; d'interagir avec cela. 
  Précisons les cas intéressants :
</para>

<itemizedlist>

<listitem><para> Avant que la réplication soit en place, 
    <emphasis>chaque</emphasis> chaque base de données démarre avec 
    le statut <quote>origin<quote> et, par défaut, tous les triggers sont du type
    <command>ENABLE TRIGGER</command>, afin qu'ils soient exécutés, comme 
    dans un système non-répliqué. </para> </listitem>

<listitem><para> Lorsqu'un abonnement &slony1; est mis en place,
    sur le noeud d'origine, les triggers <function>logtrigger</function>
    et <function>denyaccess</function> sont ajoutés, le premier est activé 
    et exécuté, le second est désactivé. </para>

<para> Au niveau des verrous, chaque instructions <xref
linkend="stmtsetaddtable"/> demandera brièvement un verrou
  exclusif sur les table ou seront attachés les triggers, ce qui a 
  toujours été le cas avec &slony1;. </para>
</listitem>

<listitem><para> Sur le noeud abonné, le processus d'abonnement ajoutera 
    les même triggers, mais avec une polarité <quote>inversée</quote>, 
    pour protéger les données d'une corruption accidentelle.  </para>

<para> Au niveau des verrous, encore une fois, cela fait peu de différences
  avec l'ancien comportement, car le processus d'abonnement qui utilise 
  <command>TRUNCATE</command>, copie les données, et altère le schéma des tables
  nécessite de <emphasis>nombreux</emphasis> verrous exclusifs sur les tables,
  et les changements dans le comportement des triggers ne change pas ce besoin.
  </para>

<para> Toutefois, notez que la capacité d'activer ou désactiver les triggers
  d'une manière supportée par &postgres; signifie qu'il n'est pas nécessaire
  de <quote>corrompre</quote> le catalogue système, ainsi nous avons l'avantage
  considérable de pouvoir utiliser <application>pg_dump</application> pour
  obtenir une sauvegarde complète et consistante sur n'importe quel noeud du 
  cluster &slony1;.</para>

</listitem>

<listitem><para> Si vous effectuez un <application>pg_dump</application> sur 
    un noeud &slony1;, et supprimez le namespace &slony1;, cela supprime
    <emphasis>tous</emphasis> les composants &slony1; et laisse la base
    de données, <emphasis>y compris son schéma</emphasis>,  dans un 
    état consistant et <quote>vierge</quote>, prêt pour n'importe quelle 
    utilisation. </para> </listitem>

<listitem><para> L'opération &rddlchanges; est désormais réalisée d'une façon
    toute à fait différente : plutôt que d'altérer chaque table répliquée pour
     la <quote>retirer du mode répliqué</quote>, &slony1; glissera simplement
     en statut <command>local</command> pour le temps de l'opération.  </para>

<para> Sur le noeud origine, cela désactive le trigger
<function>logtrigger</function>. </para>

<para> Sur chaque noeud abonné, cela désactive le trigger
<function>denyaccess</function>. </para>

<para>Ceci devrait rendre les modifications DDL
<emphasis>énormément</emphasis> moins coûteuses, car plutôt que de poser des verrous 
exclusif sur <emphasis>toutes</emphasis> les tables répliquées ( nécessaire pour les 
opérations de suppression et re-création des triggers &slony1;), seules les tables impactées 
par le script DDL sont verrouillées. </para>

</listitem>

<listitem><para> Au moment d'invoquer <xref linkend="stmtmoveset"/> sur l'ancien
noeud origine, &slony1; doit transformer ce noeud en noeud abonné, ce qui nécessite
de supprimer les triggers <function>lockset</function>, désactiver les triggers
<function>logtrigger</function> et activer les triggers <function>denyaccess</function>. 
</para>

<para> Au même moment, en réalisant <xref linkend="stmtmoveset"/> sur le
 nouveau noeud origine, &slony1; doit transformer ce noeud en origine, ce qui 
 implique la désactivation des triggers <function>denyaccess</function>,
 et d'activer les triggers <function>logtrigger</function>.
</para>

<para> Au niveau des verrous, ceci ne change pas par rapport aux nouvelles versions
  de &slony1; le verrouillage effectué ici est tout à fait nécessaire.</para>

</listitem>

<listitem><para> De le même manière que <xref linkend="stmtmoveset"/>, <xref
linkend="stmtfailover"/> transforme un noeud abonné en noeud origine, ce qui 
    nécessite de désactiver les triggers <function>denyaccess</function>, et
    d'activer les triggers <function>logtrigger</function>. Encore une fois, 
    l'implémentation des verrous est quasiment identique.</para> 
</listitem>

</itemizedlist>

</sect1>