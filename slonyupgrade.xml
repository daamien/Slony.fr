<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->

<sect1 id="slonyupgrade">
<title> Mise à jour de &slony1;</title>
<indexterm><primary>Remplacer &slony1; par une nouvelle version</primary></indexterm>

<para>Lorsque l'on met à jour &slony1;, chaque noeud du cluster doit être mis à jour simultanément, en utilisant 
  la commande &lslonik; <xref linkend="stmtupdatefunctions"/>.</para>

<para> Cela nécessite un arrêt temporaire de la réplication, mais cela n'implique pas obligatoirement une 
  coupure de service au niveau des applications qui utilisent le cluster. </para>

<para>La procédure correcte est la suivante :</para>
<itemizedlist>
<listitem>
  <para> Arrêtez les processus &lslon; sur chaque noeud. 
  (<emphasis>c.a.d</emphasis> l'ancienne version de &lslon;)
  </para>
</listitem>
<listitem><para> Installez la nouvelle version du logiciel &lslon; sur tous les noeuds.</para></listitem>
<listitem>
  <para> Exécutez un script &lslonik; contenant la commande 
    <command>update functions (id = [valeur]);</command> pour chaque noeud du cluster.
  </para>
  <note>
    <para>Souvenez-vous que le script de mise à jour, comme tous les scripts &slonik; doit contenir
    les fonctions adéquates pour fonctionner.
     </para>
   </note>
</listitem>
<listitem><para> Démarrez tous les slons.  </para> </listitem>
</itemizedlist>

<para>Toute cette opération est relativement sûre : s'il y a une incohérence 
entre les versions des composants, le &lslon; refusera de démarrer, ce 
qui consitue une protection contre les corruption.
 </para>

<para>Vous devez vous assurer que la librairie C contenant les fonctions
  trigger SPI ont été copié à la bonne place dans lors de la compilation 
  de &postgres;. Il existe de multiples approches pour cela :</para>

<para>La partie la plus compliquée consiste à s'assurer que la librairie C 
  contenant les fonctions SPI est copié au bon endroit lors de la compilation 
  de &postgres;; la manière la plus simple et la plus sûre de faire cela consiste 
  à avoir deux versions compilées de &postgres;, une pour chaque version de &slony1; 
  puis d'éteindre le serveur et le relancer avec la <quote>nouvelle</quote> version compilée;
  cette approche implique une courte coupure de service sur chaque noeud.</para>

<para>Si cette approche est réputée plus simple et plus rapide,
  rien ne vous empêche de mettre en place avec précaution les composants &slony1;
  pour écraser l'ancienne version comme décrit dans l'étape d'installation.
  Ceci ne fonctionnera <emphasis>pas</emphasis> sous Windows si Windows pose un verrou 
  sur les fichiers qui sont utilisés.</para>

<variablelist>

<varlistentry><term>Exécuter <command>make install</command> pour installer les nouveaux
    composants &slony1; au dessus des anciens.</term>

<listitem><para>Si vous compiler &slony1; sur le système sur où il sera 
    déployé et que vous compiler à partir des sources, écraser l'ancienne
    version avec la nouvelle se fait simplement avec <command>make install</command>.
    Il n'est pas nécessaire de relancer la base de donnée, il faut juste arrêter les
    processus &slony1;, exécuter le script <command>UPDATE FUNCTIONS</command> et démarrer 
    les nouveaux processus &lslon;.</para>

<para>Malheureusement cette approche nécessite un environnement de 
  compilation sur le serveur où la mise à jour sera déployée. 
  Ceci n'est pas forcément compatible avec la volonté d'utiliser 
  des binaires commun à &postgres; et &slony1; sur l'ensemble des noeuds.
</para>
</listitem></varlistentry>

<varlistentry><term>Compiler à nouveau &postgres; et &slony1;</term>

<listitem><para>Avec cette approche, l'ancienne version de &postgres; accompagnée des 
    anciens composants &slony1; sont conservés après la bascule vers une nouvelle
    version &postgres; accompagnée des nouveaux composants &slony1;. Afin de bascule 
    vers la nouvelle version de &slony1; vous devez redémarrer le 
    serveur <command>postmaster</command> &postgres;, ce qui implique l'interruption des 
    applications. afin que le serveur soit informé de l'emplacement des nouveaux composants.
 </para></listitem></varlistentry>

</variablelist>

<sect2> <title> Problème avec TABLE ADD KEY dans &slony1; 2.0 </title> 

<para> Généralement, les mises à jour de versions &slony1; ne nécessitent
  pas de porter une attention particulière au réplicat existant. C'est à dire 
  que vous pouvez simplement arrêter les &slon;s, mettre en place les binaires, 
  lancer  <xref linkend="stmtupdatefunctions"/> sur chaque noeud et redémarrer &lslon;s.
  Les modifications de schéma étant internes au schéma du cluster, <xref linkend="stmtupdatefunctions"/>
  est capable de réaliser toutes les altérations. Avec la version 2, cela change si il existe des
  tables qui utilisaient <xref linkend="stmttableaddkey"/>. La version 2 ne supporte pas la colonne 
  <quote>extra</quote>, et <quote>réparer</quote> le schéma pour obtenir une clé primaire correcte
  n'est pas dans les attributions de <xref linkend="stmtupdatefunctions"/>.</para>

<para> Lorsque que l'on met à jour depuis une version 1.0.x, 1.1.x ou 1.2.x vers une version 
  2, il est nécessaire de supprimer toute clé primaire gérée par &slony1;.</para>

<para>On peut identifier les tables concernées avec la requête SQL suivantes :
   <command> SELECT n.nspname, c.relname FROM pg_class c,
pg_namespace n WHERE c.oid in (SELECT attrelid FROM pg_attribute WHERE
attname LIKE '_Slony-I_%rowID' and not attisdropped) and reltype &amp;lt&amp;gt 0
and n.oid = c.relnamespace order by n.nspname, c.relname; </command>
</para>

<para> L'approche la plus simple pour rectifier l'état de ces tables est la suivante : </para>

<itemizedlist>

<listitem><para> Retirer la table de la réplication avec la commande &lslonik;
<xref linkend="stmtsetdroptable"/>. </para>

<para> Ceci ne supprime <emphasis>pas</emphasis> les colonnes créées par 
&slony1;. </para>
</listitem>

<listitem><para> Sur chaque noeud, exécutez un script SQL pour modifier 
    la table et supprimer les colonnes additionnelles.</para>  <para> 
    <command> alter table
nom_table drop column "_Slony-I_cluster-rowID";</command> </para>

<para>Ceci doit être exécuté sur chaque noeud. Selon votre préférence, vous pouvez utiliser 
  <xref linkend="stmtddlscript"/>  pour cela.</para>


<para>Si la table est une table massivement mise à jour, sachez que cette modification
  posera un verrou exclusif sur la table. Elle ne détiendra pas ce verrou très longtemps; 
  supprimer une colonne est une opération assez rapide car cela ce contente de marquer
  la colonne comme supprimée. Cela ne nécessite <emphasis>pas</emphasis> de réécrire tout le 
  contenu de la table. Les tuples qui ont une valeur dans cette colonne continueront à 
  avoir cette valeur. Pour les nouveaux tuples le valeur sera NULL, et les requêtes ignorerons
  cette colonne. L'espace occupé par ces colonnes sera récupéré lorsque les tuples 
  sera mis à jour. </para>

<para>Notez qu'à cette étape de la procédure, cette table n'est pas répliquée.
  Si une erreur a lieu, la réplication à cet instant n'apporte aucune protection.
  sur cette table. C'est dommage mais inévitable.</para>
</listitem>

<listitem><para>Assurez-vous que la table possède un candidat éligible 
    pour une clé primaire, c'est à dire un ensemble de colonnes  NOT NULL et UNIQUE.</para>

<para>Les différents cas possibles font que les développeurs 
  n'ont pas fait d'efforts pour automatiser cette procédure.</para>

<itemizedlist>

<listitem><para> Si la table est petite, il peut être parfaitement
    raisonnable d'ajouter une nouvelle colonne (notez que cela doit
    être fait sur <emphasis>chaque noeud</emphasis> ! ), lui assigner
    une nouvelle séquence et la déclarer comme clé primaire. </para>

<para>Si il n'y a que quelques tuples, cela ne prendre qu'une fraction de seconde et 
  avec de la chance, cela n'aura pas d'impact sur l'application.</para>

<para>Même si la table est relativement large, mais qu'elle n'est pas 
  accédée fréquemment par l'application, alors le verrouillage de la table 
  provoqué par <command>ALTER TABLE</command> n'entraînera pas d'inconvénients.
</para></listitem>

<listitem> <para>Si la table est large, qu'elle est vitale et fortement utilisée
    par l'application, alors il peut être nécessaire de prévoir une coupure 
    de service de l'application afin d'accomplir les modifications, ce qui
    vous laissera un peu vulnérable tant que la procédure ne sera pas complétée.
    </para>

<para>Si une coupure de service est problématique, alors la mise à jour vers 
  &slony1; version 2 devra être planifiée avec soin...</para>
</listitem>

</itemizedlist>
</listitem>

<listitem><para>Créez un nouvel ensemble de réplication (<xref
linkend="stmtcreateset"/> et ajouter à nouveau la table
    dans cet ensemble (<xref
linkend="stmtsetaddtable"/>).  </para>


<para>Si il existe plusieurs tables, elles peuvent être gérées via 
  un ensemble de réplication unique.</para>
</listitem>

<listitem><para>Abonnez l'ensemble de réplication (<xref linkend="stmtsubscribeset"/>)
sur tous les noeuds désirés. </para> </listitem>

<listitem><para>Une fois que l'abonnement est complété, fusionnez les ensembles de réplications
    si nécessaire (<xref linkend="stmtmergeset"/>). </para> </listitem>

</itemizedlist>

<para>Cette approche devrait fonctionner pour les tables qui sont 
  relativement petites, ou rarement utilisées. D'autre part, si la table 
  est large et massivement utilisée, une autre approche pourrait être nécessaire,
  c'est à dire créer votre propre séquence, et <quote>promouvoir</quote> l'ancienne
  colonne générée par &slony1; dans une colonne  <quote>réelle</quote> au sein 
  du schéma de votre base de données. Les grandes lignes de cette procédure sont
  les suivantes :
 </para>

<itemizedlist>

<listitem><para>Ajouter une séquence qui assigne des valeurs à la colonne.</para>

<para>Les étapes d'installation incluent les commandes SQL <command>CREATE
SEQUENCE</command>, SQL <command>SELECT SETVAL()</command> ( pour définir une valeur 
de séquence assez haute pour refléter les valeurs utilisées dans la table), Slonik <xref linkend="stmtcreateset"/>
( pour créer un ensemble de réplication dans lequel on placera la séquence ), 
 Slonik <xref linkend="stmtsetaddsequence"/> ( pour placer la séquence dans l'ensemble de réplication),
 Slonik <xref linkend="stmtsubscribeset"/> ( pour définir les abonnements de ce nouvel
 ensemble de réplication )</para>
</listitem>

<listitem><para>Attachez la séquence à la colonne dans la table. </para>

<para> Ceci implique les commandes <command>ALTER TABLE ALTER COLUMN</command>,
qui doivent être exécutées via la commande Slonik <xref
linkend="stmtddlscript"/>. </para>
</listitem>

<listitem><para> Renommez la colonne 
<envar>_Slony-I_@CLUSTERNAME@_rowID</envar> afin que &slony1; ne considère 
pas qu'elle est sous son contrôle.</para>

<para> Ceci implique les commandes <command>ALTER TABLE ALTER COLUMN</command>,
qui doivent être exécutées via la commande Slonik <xref
linkend="stmtddlscript"/>. </para>


<para>Notez que ces deux modifications peuvent être accomplies au sein
  d'une requête <xref linkend="stmtddlscript"/> unique. </para>
</listitem>

</itemizedlist>

</sect2>

<sect2> <title> Nouvelle gestion des triggers dans &slony1; Version 2 </title>

<para> Un des changement majeurs de &slony1; est que l'activation et la désactivation
  des triggers et règles ("rules") se fait maintenant entièrement en SQL, supporté 
  par &postgres; 8.3+, plutôt que via des modifications directes dans le catalogue
  système. </para>

<para>Cela implique que les utilisateurs de &slony1; doivent étudier la syntaxe &postgres; pour
<command>ALTER TABLE</command>, car c'est ainsi qu'ils accompliront ce qu'ils accomplissait 
précédemment via les commandes  <xref
linkend="stmtstoretrigger"/> et <xref linkend="stmtdroptrigger"/>. 
</para>
</sect2>
</sect1>
