<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->

<sect1 id="adminscripts">
<title>&slony1; Administration Scripts</title>

<indexterm><primary>administration scripts for &slony1;</primary></indexterm>

<para> A number of tools have grown over the course of the history of
&slony1; to help users manage their clusters.  This section along with
the ones on <xref linkend="monitoring"/> and <xref
linkend="maintenance"/> discusses them. </para>

<sect2 id="altperl"> <title>altperl Scripts</title>

<indexterm><primary>altperl scripts for &slony1;</primary></indexterm>

<para>There is a set of scripts to simplify administeration
of set of &slony1; instances. The scripts support having arbitrary numbers of
nodes. They may be installed as part of the installation process:</para>

<para><command>
 ./configure --with-perltools
</command></para>

<para>This will produce a number of scripts with the prefix
<command>slonik_</command>.  They eliminate tedium by always referring
to a central configuration file for the details of your site
configuration. A documented sample of this file is provided in
<filename>altperl/slon_tools.conf-sample</filename>. Most also include
some command line help with the "--help" option, making them easier to
learn and use.
</para>

<para>Most generate Slonik scripts that are printed to STDOUT. 
At one time, the commands were passed directly to <xref linkend="slonik"/> for execution. 
Unfortunately, this turned out to be a pretty large calibre
<quote>foot gun</quote>, as minor typos on the command line led, on a
couple of occasions, to pretty calamitous actions. The savvy administrator should review the script
<emphasis>before</emphasis> piping it to <xref linkend="slonik"/>.</para>

<sect3><title>Support for Multiple Clusters</title>
<indexterm><primary>Multiple Cluster support for the altperl tools</primary></indexterm>

<para>The UNIX environment variable <envar>SLONYNODES</envar> is used
to determine what Perl configuration file will be used to control the
shape of the nodes in a &slony1; cluster. If it is not provided, a
default <filename>slon_tools.conf</filename> location will be
referenced. </para>

<para>What variables are set up.
<itemizedlist>

<listitem><para><envar>$CLUSTER_NAME</envar>=orglogs;	# What is the name of the replication cluster?</para></listitem>
<listitem><para><envar>$LOGDIR</envar>='/opt/OXRS/log/LOGDBS';	# What is the base directory for logs?</para></listitem>
<listitem><para><envar>$APACHE_ROTATOR</envar>="/opt/twcsds004/OXRS/apache/rotatelogs";  # If set, where to find Apache log rotator</para></listitem>
<listitem><para><envar>foldCase</envar> # If set to 1, object names (including schema names) will be
folded to lower case.  By default, your object names will be left
alone.  Note that &postgres; itself folds object names to lower case;
if you create a table via the command <command> CREATE TABLE
SOME_THING (Id INTEGER, STudlYName text);</command>, the result will
be that all of those components are forced to lower case, thus
equivalent to <command> create table some_thing (id integer,
studlyname text);</command>, and the name of table and, in this case,
the fields will all, in fact, be lower case. </para>

</listitem>
</itemizedlist>
</para>

<para> You then define the set of nodes that are to be replicated
using a set of calls to <function>add_node()</function>.
</para>

<para><command>
  add_node (host => '10.20.30.40', dbname => 'orglogs', port => 5437,
			  user => 'postgres', node => 4, parent => 1);
</command></para>

<para>The set of parameters for <function>add_node()</function> are thus:</para>

<programlisting>
my %PARAMS =   (host=> undef,		# Host name
	   	dbname => 'template1',	# database name
		port => 5432,		# Port number
		user => 'postgres',	# user to connect as
		node => undef,		# node number
		password => undef,	# password for user
		parent => 1,		# which node is parent to this node
		noforward => undef	# shall this node be set up to forward results?
                sslmode => undef        # SSL mode argument - determine 
                                        # priority of SSL usage
                                        # = disable,allow,prefer,require
);
</programlisting>
</sect3>

<sect3><title>Set configuration - cluster.set1, cluster.set2</title>
<indexterm><primary>cluster.set1 - replication set configuration for Perl tools</primary></indexterm>

<para>The UNIX environment variable <envar>SLONYSET</envar> is used to
determine what Perl configuration file will be used to determine what
objects will be contained in a particular replication set.</para>

<para>Unlike <envar>SLONYNODES</envar>, which is essential for
<emphasis>all</emphasis> of the <xref linkend="slonik"/>-generating
scripts, this only needs to be set when running
<filename>create_set</filename>, as that is the only script used to
control what tables will be in a particular replication set.</para>

</sect3>
<sect3><title>slonik_build_env</title>
<indexterm><primary>slonik_build_env</primary></indexterm>

<para>Queries a database, generating output hopefully suitable for
<filename>slon_tools.conf</filename> consisting of:</para>
<itemizedlist>

<listitem><para> a set of <function>add_node()</function> calls to configure the cluster</para></listitem>
<listitem><para> The arrays <envar>@KEYEDTABLES</envar>,
<envar>nvar>@SERIALT</envar>nvar>, and <envar>@SEQUENCES</envar></para></listitem>
</itemizedlist>
</sect3>
<sect3><title>slonik_print_preamble</title>

<para>This generates just the <quote>preamble</quote> that is required
by all slonik scripts.  In effect, this provides a
<quote>skeleton</quote> slonik script that does not do
anything.</para>
</sect3>
<sect3><title>slonik_create_set</title>

<para>This requires <envar>SLONYSET</envar> to be set as well as
<envar>SLONYNODES</envar>; it is used to generate the
<command>slonik</command> script to set up a replication set
consisting of a set of tables and sequences that are to be
replicated.</para>
</sect3>
<sect3><title>slonik_drop_node</title>

<para>Generates Slonik script to drop a node from a &slony1; cluster.</para>
</sect3>
<sect3><title>slonik_drop_set</title>

<para>Generates Slonik script to drop a replication set
(<emphasis>e.g.</emphasis> - set of tables and sequences) from a
&slony1; cluster.</para>
</sect3>

<sect3 id="slonik-drop-table"><title>slonik_drop_table</title>

<para>Generates Slonik script to drop a table from replication.
Requires, as input, the ID number of the table (available from table
<envar>sl_table</envar>) that is to be dropped. </para>
</sect3>

<sect3><title>slonik_execute_script</title>

<para>Generates Slonik script to push DDL changes to a replication set.</para>
</sect3>
<sect3><title>slonik_failover</title>

<para>Generates Slonik script to request failover from a dead node to some new origin</para>
</sect3>
<sect3><title>slonik_init_cluster</title>

<para>Generates Slonik script to initialize a whole &slony1; cluster,
including setting up the nodes, communications paths, and the listener
routing.</para>
</sect3>
<sect3><title>slonik_merge_sets</title>

<para>Generates Slonik script to merge two replication sets together.</para>
</sect3>
<sect3><title>slonik_move_set</title>

<para>Generates Slonik script to move the origin of a particular set to a different node.</para>
</sect3>
<sect3><title>replication_test</title>

<para>Script to test whether &slony1; is successfully replicating
data.</para>
</sect3>
<sect3><title>slonik_restart_node</title>

<para>Generates Slonik script to request the restart of a node.  This was
particularly useful pre-1.0.5 when nodes could get snarled up when
slon daemons died.</para>
</sect3>
<sect3><title>slonik_restart_nodes</title>

<para>Generates Slonik script to restart all nodes in the cluster.  Not
particularly useful.</para>
</sect3>
<sect3><title>slony_show_configuration</title>

<para>Displays an overview of how the environment (e.g. - <envar>SLONYNODES</envar>) is set
to configure things.</para>
</sect3>
<sect3><title>slon_kill</title>

<para>Kills slony watchdog and all slon daemons for the specified set.  It
only works if those processes are running on the local host, of
course!</para>
</sect3>
<sect3><title>slon_start</title>

<para>This starts a slon daemon for the specified cluster and node, and uses
slon_watchdog to keep it running.</para>
</sect3>
<sect3 id="slonwatchdog"><title>slon_watchdog</title>

<para>Used by <command>slon_start</command>.</para>

</sect3><sect3><title>slon_watchdog2</title>

<para>This is a somewhat smarter watchdog; it monitors a particular
&slony1; node, and restarts the slon process if it hasn't seen updates
go in in 20 minutes or more.</para>

<para>This is helpful if there is an unreliable network connection such that
the slon sometimes stops working without becoming aware of it.</para>

</sect3>
<sect3><title>slonik_store_node</title>

<para>Adds a node to an existing cluster.</para>
</sect3>
<sect3><title>slonik_subscribe_set</title>

<para>Generates Slonik script to subscribe a particular node to a particular replication set.</para>

</sect3><sect3><title>slonik_uninstall_nodes</title>

<para>This goes through and drops the &slony1; schema from each node;
use this if you want to destroy replication throughout a cluster.
This is a <emphasis>VERY</emphasis> unsafe script!</para>

</sect3><sect3><title>slonik_unsubscribe_set</title>

<para>Generates Slonik script to unsubscribe a node from a replication set.</para>

</sect3>
<sect3><title>slonik_update_nodes</title>

<para>Generates Slonik script to tell all the nodes to update the
&slony1; functions.  This will typically be needed when you upgrade
from one version of &slony1; to another.</para>
</sect3>
</sect2>

<sect2 id="mkslonconf"><title>mkslonconf.sh</title>

<indexterm><primary>generating slon.conf files for &slony1;</primary></indexterm>

<para> This is a shell script designed to rummage through a &slony1;
cluster and generate a set of <filename>slon.conf</filename> files
that &lslon; accesses via the <command> slon -f slon.conf </command>
option. </para>

<para> With all of the configuration residing in a configuration file
for each &lslon;, they can be invoked with minimal muss and fuss, with
no risk of forgetting the <command>-a</command> option and thereby
breaking a <link linkend="logshipping"> log shipping </link>
node. </para>

<para> Running it requires the following environment configuration: </para>

<itemizedlist>

<listitem><para> Firstly, the environment needs to be set up with
suitable parameters for libpq to connect to one of the databases in
the cluster.  Thus, you need some suitable combination of the
following environment variables set:</para>

<itemizedlist>
<listitem><para><envar>PGPORT</envar></para></listitem>
<listitem><para><envar>PGDATABASE</envar></para></listitem>
<listitem><para><envar>PGHOST</envar></para></listitem>
<listitem><para><envar>PGUSER</envar></para></listitem>
<listitem><para><envar>PGSERVICE</envar></para></listitem>
</itemizedlist>

</listitem>

<listitem><para> <envar>SLONYCLUSTER</envar> - the name of the
&slony1; cluster to be <quote>rummaged</quote>.  </para></listitem>

<listitem><para> <envar>MKDESTINATION</envar> - a directory for
configuration to reside in; the script will create
<filename>MKDESTINATION/$SLONYCLUSTER/conf</filename> for the &lslon;
configuration files, and
<filename>MKDESTINATION/$SLONYCLUSTER/pid</filename> for &lslon; to
store PID files in. </para></listitem>

<listitem><para> <envar>LOGHOME</envar> - a directory for log files to
reside in; a directory of the form
<command>$LOGHOME/$SLONYCLUSTER/node[number]</command> will be created
for each node. </para></listitem>

</itemizedlist>

<para> For any <quote>new</quote> nodes that it discovers, this script
will create a new &lslon; conf file. </para>

<warning><para> It is fair to say that there are several conditions to
beware of; none of these should be greatly surprising...</para>

<itemizedlist>

<listitem><para> The DSN is pulled from the minimum value found for
each node in <envar>sl_path</envar>.  You may very well need to modify
this.</para></listitem>

<listitem><para> Various parameters are set to default values; you may
wish to customize them by hand. </para></listitem>

<listitem><para> If you are running &lslon; processes on multiple
nodes (<emphasis>e.g.</emphasis> - as when running &slony1; across a
WAN), this script will happily create fresh new config files for
&lslon;s you wanted to have run on another host.  </para>

<para> Be sure to check out what nodes it set up before restarting
&lslon;s.  </para>

<para> This would usually only cause some minor inconvenience due to,
for instance, a &lslon; running at a non-preferred site, and either
failing due to lack of network connectivity (in which no damage is
done!) or running a bit less efficiently than it might have due to
living at the wrong end of the network <quote>pipe.</quote> </para>

<para> On the other hand, if you are running a log shipping node at
the remote site, accidentally introducing a &lslon; that
<emphasis>isn't</emphasis> collecting logs could ruin your whole
week. </para>
</listitem>
</itemizedlist>

</warning>

<para> The file layout set up by <filename>mkslonconf.sh</filename>
was specifically set up to allow managing &lslon;s across a
multiplicity of clusters using the script in the following
section... </para>

</sect2>

<sect2 id="launchclusters"><title> launch_clusters.sh </title>

<indexterm><primary>launching &slony1; cluster using slon.conf files</primary></indexterm>

<para> This is another shell script which uses the configuration as
set up by <filename>mkslonconf.sh</filename> and is intended to either
be run at system boot time, as an addition to the
<filename>rc.d</filename> processes, or regularly, as a cron process,
to ensure that &lslon; processes are running.</para>

<para> It uses the following environment variables:</para>

<itemizedlist>

<listitem><para><envar>PATH</envar> which needs to contain, preferably
at the beginning, a path to the &lslon; binaries that should be
run.</para></listitem>

<listitem><para><envar>SLHOME</envar> indicates the
<quote>home</quote> directory for &lslon; configuration files; they
are expected to be arranged in subdirectories, one for each cluster,
with filenames of the form <filename>node1.conf</filename>,
<filename>node2.conf</filename>, and such </para>

<para> The script uses the command <command>find $SLHOME/$cluster/conf
-name "node[0-9]*.conf"</command> to find &lslon; configuration files.</para>

<para> If you remove some of these files, or rename them so their
names do not conform to the <command>find</command> command, they
won't be found; that is an easy way to drop nodes out of this system.</para>
</listitem>

<listitem><para><envar>LOGHOME </envar> indicates the
<quote>home</quote> directory for log storage.</para>

<para> This script does not assume the use of the Apache log rotator
to manage logs; in that &postgres; version 8 does its own log
rotation, it seems undesirable to retain a dependancy on specific log
rotation <quote>technology.</quote> </para></listitem>

<listitem><para><envar>CLUSTERS</envar> is a list of &slony1; clusters
under management. </para></listitem>

</itemizedlist>

<para> In effect, you could run this every five minutes, and it would
launch any missing &lslon; processes. </para>
</sect2>

<sect2 id="extractschema"><title> <filename> slony1_extract_schema.sh </filename> </title>

<indexterm><primary>script - slony1_extract_schema.sh</primary></indexterm>

<para> You may find that you wish to create a new node some time well
after creating a cluster.  The script <filename>
slony1_extract_schema.sh </filename> will help you with this.</para>

<para> A command line might look like the following:</para>

<para><command> PGPORT=5881 PGHOST=master.int.example.info ./slony1_extract_schema.sh payroll payroll temppayroll </command> </para>

<para> It performs the following:</para>

<itemizedlist>
<listitem><para> It dumps the origin node's schema, including the data in the &slony1; cluster schema. </para>

<para> Note that the extra environment variables <envar>PGPORT</envar>
and <envar>PGHOST</envar> to indicate additional information about
where the database resides. </para></listitem>

<listitem><para> This data is loaded into the freshly created temporary database, <envar>temppayroll</envar> </para> </listitem>
<listitem><para> The table and sequence OIDs in &slony1; tables are corrected   to point to the temporary database's configuration.  </para> </listitem>
<listitem><para>  A slonik script is run to perform <xref linkend="stmtuninstallnode"/> on the temporary database.   This eliminates all the special &slony1; tables, schema, and removes &slony1; triggers from replicated tables. </para> </listitem>
<listitem><para> Finally, <application>pg_dump</application> is run against the temporary database, delivering a copy of the cleaned up schema to standard output. </para> </listitem>
</itemizedlist>

</sect2>
<sect2><title> slony-cluster-analysis </title>

<indexterm><primary>script - slony-cluster-analysis</primary></indexterm>

<para> If you are running a lot of replicated databases, where there
are numerous &slony1; clusters, it can get painful to track and
document this.  The following tools may be of some assistance in this.</para>

<para> <application>slony-cluster-analysis.sh</application> is a shell
script intended to provide some over-time analysis of the
configuration of a &slony1; cluster.  You pass in the usual
<application>libpq</application> environment variables
(<envar>PGHOST</envar>, <envar>PGPORT</envar>,
<envar>PGDATABASE</envar>, and such) to connect to a member of a
&slony1; cluster, and pass the name of the cluster as an argument.</para>

<para> The script then does the following:</para>
<itemizedlist>
<listitem><para> Runs a series of queries against the &slony1; tables to get lists of nodes, paths, sets, and tables. </para> </listitem>
<listitem><para> This is stowed in a temporary file in <filename>/tmp</filename> </para> </listitem>
<listitem><para> A comparison is done between the present configuration and the configuration the last time the tool was run.  If the configuration differs, an email of the difference (generated using <application>diff</application>) is sent to a configurable email address. </para> </listitem>
<listitem><para> If the configuration has changed, the old configuration file is renamed to indicate when the script noticed the change. </para></listitem>
<listitem><para> Ultimately, the current configuration is stowed in <envar>LOGDIR</envar> in a filename like <filename>cluster.last </filename> </para> </listitem>
</itemizedlist>

<para> There is a sample <quote>wrapper</quote> script,
<filename>slony-cluster-analysis-mass.sh</filename>, which sets things
up to point to a whole bunch of &slony1; clusters.</para>

<para> This should make it easier for a group of DBAs to keep track of
two things: </para>

<itemizedlist>

<listitem><para> Documenting the current state of system
configuration.  </para></listitem>

<listitem><para> Noticing when configuration
changes. </para></listitem>
</itemizedlist>

</sect2>

<sect2 id="configurereplication"> <title> Generating slonik scripts
using <filename>configure-replication.sh</filename> </title>

<indexterm><primary> generate slonik scripts for a cluster </primary></indexterm>

<para> The <filename>tools</filename> script
<filename>configure-replication.sh</filename> is intended to automate
generating slonik scripts to configure replication.  This script is
based on the configuration approach taken by the <xref
linkend="testbed"/>.</para>

<para> This script uses a number (possibly large, if your
configuration needs to be particularly complex) of environment
variables to determine the shape of the configuration of a cluster.
It uses default values extensively, and in many cases, relatively few
environment values need to be set in order to get a viable
configuration. </para>

<sect3><title>Global Values</title>

<para> There are some values that will be used universally across a
cluster: </para>

<variablelist>
<varlistentry><term><envar>  CLUSTER </envar></term>
<listitem><para> Name of Slony-I cluster</para></listitem></varlistentry>
<varlistentry><term><envar>  NUMNODES </envar></term>
<listitem><para> Number of nodes to set up</para></listitem></varlistentry>

<varlistentry><term><envar>  PGUSER </envar></term>
<listitem><para> name of PostgreSQL superuser controlling replication</para></listitem></varlistentry>
<varlistentry><term><envar>  PGPORT </envar></term>
<listitem><para> default port number</para></listitem></varlistentry>
<varlistentry><term><envar>  PGDATABASE </envar></term>
<listitem><para> default database name</para></listitem></varlistentry>

<varlistentry><term><envar>  TABLES </envar></term>
<listitem><para> a list of fully qualified table names (<emphasis>e.g.</emphasis> - complete with
           namespace, such as <command>public.my_table</command>)</para></listitem></varlistentry>
<varlistentry><term><envar>  SEQUENCES </envar></term>
<listitem><para> a list of fully qualified sequence names (<emphasis>e.g.</emphasis> - complete with
           namespace, such as <command>public.my_sequence</command>)</para></listitem></varlistentry>

</variablelist>

<para>Defaults are provided for <emphasis>all</emphasis> of these
values, so that if you run
<filename>configure-replication.sh</filename> without setting any
environment variables, you will get a set of slonik scripts.  They may
not correspond, of course, to any database you actually want to
use...</para>
</sect3>

<sect3><title>Node-Specific Values</title>

<para>For each node, there are also four environment variables; for node 1: </para>
<variablelist>
<varlistentry><term><envar>  DB1 </envar></term>
<listitem><para> database to connect to</para></listitem></varlistentry>
<varlistentry><term><envar>  USER1 </envar></term>
<listitem><para> superuser to connect as</para></listitem></varlistentry>
<varlistentry><term><envar>  PORT1 </envar></term>
<listitem><para> port</para></listitem></varlistentry>
<varlistentry><term><envar>  HOST1 </envar></term>
<listitem><para> host</para></listitem></varlistentry>
</variablelist>

<para> It is quite likely that <envar>DB*</envar>,
<envar>USER*</envar>, and <envar>PORT*</envar> should be drawn from
the global <envar>PGDATABASE</envar>, <envar>PGUSER</envar>, and
<envar>PGPORT</envar> values above; having the discipline of that sort
of uniformity is usually a good thing.</para>

<para> In contrast, <envar>HOST*</envar> values should be set
explicitly for <envar>HOST1</envar>, <envar>HOST2</envar>, ..., as you
don't get much benefit from the redundancy replication provides if all
your databases are on the same server!</para>

</sect3>

<sect3><title>Resulting slonik scripts</title>

<para> slonik config files are generated in a temp directory under
<filename>/tmp</filename>.  The usage is thus:</para>

<itemizedlist>

<listitem> <para><filename>preamble.slonik</filename> is a
<quote>preamble</quote> containing connection info used by the other
scripts.</para>

<para> Verify the info in this one closely; you may want to keep this
permanently to use with future maintenance you may want to do on the
cluster.</para></listitem>

<listitem><para> <filename>create_set.slonik</filename></para>

<para>This is the first script to run; it sets up the requested nodes
as being &slony1; nodes, adding in some &slony1;-specific config
tables and such.</para>

<para>You can/should start slon processes any time after this step has
run.</para></listitem>

<listitem><para><filename>  store_paths.slonik</filename></para>

<para> This is the second script to run; it indicates how the &lslon;s
should intercommunicate.  It assumes that all &lslon;s can talk to all
nodes, which may not be a valid assumption in a complexly-firewalled
environment.  If that assumption is untrue, you will need to modify
the script to fix the paths.</para></listitem>

<listitem><para><filename>create_set.slonik</filename></para>

<para> This sets up the replication set consisting of the whole bunch
of tables and sequences that make up your application's database
schema.</para>

<para> When you run this script, all that happens is that triggers are
added on the origin node (node #1) that start collecting updates;
replication won't start until #5...</para>

<para>There are two assumptions in this script that could be
invalidated by circumstances:</para>

<itemizedlist>
     <listitem><para> That all of the tables and sequences have been
     included.</para>

     <para> This becomes invalid if new tables get added to your
     schema and don't get added to the <envar>TABLES</envar>
     list.</para> </listitem>

     <listitem><para> That all tables have been defined with primary
     keys.</para>

     <para> Best practice is to always have and use true primary keys.
     If you have tables that require choosing a candidate primary key
     or that require creating a surrogate key using <xref
     linkend="stmttableaddkey"/>, you will have to modify this script
     by hand to accomodate that. </para></listitem>

</itemizedlist>
</listitem>

<listitem><para> <filename> subscribe_set_2.slonik </filename></para>

  <para> And 3, and 4, and 5, if you set the number of nodes
  higher... </para>

  <para> This is the step that <quote>fires up</quote>
  replication.</para>

  <para> The assumption that the script generator makes is that all
  the subscriber nodes will want to subscribe directly to the origin
  node.  If you plan to have <quote>sub-clusters,</quote> perhaps
  where there is something of a <quote>master</quote> location at each
  data centre, you may need to revise that.</para>

  <para> The slon processes really ought to be running by the time you
  attempt running this step.  To do otherwise would be rather
  foolish.</para> </listitem>
</itemizedlist>

</sect3>
</sect2>

<sect2 id="bsd-ports-profile"> <title> <filename> slon.in-profiles </filename> </title>
<subtitle> Apache-Style profiles for FreeBSD <filename>ports/databases/slony/*</filename> </subtitle>

<para> In the tools area, <filename>slon.in-profiles</filename> is a
script that might be used to start up &lslon; instances at the time of
system startup.  It is designed to interact with the FreeBSD Ports
system.</para>

</sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode:sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:"slony.sgml"
sgml-exposed-tags:nil
sgml-local-catalogs:("/usr/lib/sgml/catalog")
sgml-local-ecat-files:nil
End:
-->
